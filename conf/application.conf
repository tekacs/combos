combo {
  # TODO: Not all of these config settings have effect, yet.

  # A whitelist of allowed topics on this server.
  # Defaults to 'all' if not defined (None, not [])
  # topics = []

  # Global feature permissions
  permissions {
    index       = true  # GET /index
    list_topics = true  # GET /topics
  }

  # Per-topic configuration. Overrides default values, but does not override the topics whitelist.
  topic {
    # Default topic settings
    _default {
      # The number of fact updates kept around for replay and access.
      # '0' will only disable the buffer, not the topic.
      # '-1' will not limit the size of the buffer.
      buffer_size = 1000
      permissions {
        # May be overriden per-topic
        list_facts    = true  # GET /topics/:topic/facts
        relimit_facts = true  # GET /topics/:topic/facts?drop=?&limit=?
        publish_facts = true  # POST /topics/:topic/facts
        subscriptions = true  # {GET, POST} /topics/:topic/subscriptions{/:sub_id/next}
      }
    }
    # The wildcard (all topics) topic
    _wildcard {
      buffer_size = 10000
      permissions {
        list_facts    = true
        relimit_facts = true
        publish_facts = false
        subscriptions = true
      }
    }
    # test {
    #   buffer_size = -1
    #   permissions {
    #     relimit_facts = false
    #   }
    # }
  }
}

akka {
  loglevel = DEBUG
  actor {
    debug {
#      receive = true
#      autoreceive = true
#      lifecycle = true
    }
  }
}

# Required headers for in-browser/JS access to a combo server on another domain.
cors {
  # "Defaults"",<extra-header>"",<extra-header>" to make it easy to see the defaults
  allow_origin = "*"
  headers.allowed = "x-requested-with,content-type,Cache-Control,Pragma,Date"",Patience"
}

# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="<;=1avnPwcUpdZxPbUnbvLtBn<cg/OdO@AMf30[:h@@XcWfDqj7fl=H<CxdotgV2"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=org.h2.Driver
db.default.url="jdbc:h2:mem:play;MODE=PostgreSQL"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

